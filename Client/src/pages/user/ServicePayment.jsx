// src/pages/ServicePayment.jsx
import React, { useState, useEffect, useContext, useMemo, useRef } from "react";
import { useNavigate } from "react-router-dom";
// import TopMenu from "./TopMenu"; // n·∫øu mu·ªën hi·ªÉn th·ªã
import vnpayLogo from "/images/vnpay.png";
import { subscriptionService } from "../../services/subscriptionService";
import { paymentService } from "../../services/paymentService";
import { UserContext } from "../../context/UserContext";
import { showInfo, showError, showSuccess } from "../../utils/alert";
import { usePaymentQrStore } from "../../stores/paymentQrStore";

// Role order (low ‚Üí high)
const ROLE_HIERARCHY = ["Free User", "Pro User", "Premium User"];
// subscriptionId ‚Üí role name
const SUBSCRIPTION_ID_TO_ROLE = { 1: "Free User", 2: "Pro User", 3: "Premium User" };

// Feature table
const featureGroups = [
  {
    title: "üìÅ T·∫£i l√™n CV & m√¥ t·∫£ c√¥ng vi·ªác",
    items: [
      { feature: "T·∫£i l√™n CV c·ªßa b·∫°n", values: [true, true, true] },
      { feature: "T·∫£i l√™n m√¥ t·∫£ c√¥ng vi·ªác", values: [true, true, true] },
      { feature: "Nh·∫≠p link m√¥ t·∫£ c√¥ng vi·ªác t·ª´ TOPCV", values: [true, true, true] },
    ],
  },
  {
    title: "üíº C√¥ng vi·ªác ph√π h·ª£p",
    items: [
      { feature: "Danh s√°ch c√¥ng vi·ªác ph√π h·ª£p", values: [false, true, true] },
      { feature: "ƒê·ªô ph√π h·ª£p CV v√† v·ªã tr√≠ c√¥ng vi·ªác", values: [false, true, true] },
    ],
  },
  {
    title: "üß† Ph√¢n t√≠ch k·ªπ nƒÉng & Kh√≥a h·ªçc",
    items: [
      { feature: "K·ªπ nƒÉng hi·ªán t·∫°i c·ªßa b·∫°n", values: [true, true, true] },
      { feature: "K·ªπ nƒÉng c√≤n thi·∫øu", values: [false, true, true] },
      { feature: "K·ªπ nƒÉng y√™u c·∫ßu c·ªßa t·ª´ng m√¥ t·∫£ c√¥ng vi·ªác", values: [false, true, true] },
      { feature: "ƒê·ªô ph√π h·ª£p gi·ªØa k·ªπ nƒÉng hi·ªán t·∫°i v√† y√™u c·∫ßu", values: [false, true, true] },
      { feature: "Nh·∫≠n ƒë·ªãnh chung k·ªπ nƒÉng c·ªßa b·∫°n v√† m√¥ t·∫£", values: [false, true, true] },
      { feature: "Danh s√°ch kh√≥a h·ªçc g·ª£i √Ω", values: [false, false, true] },
      { feature: "Th√™m kh√≥a h·ªçc y√™u th√≠ch", values: [false, false, true] },
      { feature: "Theo d√µi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô kh√≥a h·ªçc", values: [false, false, true] },
    ],
  },
];

const planDescriptions = [
  "Mi·ªÖn ph√≠ d√†nh cho c√°c c√° nh√¢n mu·ªën t·∫£i l√™n CV v√† nh·∫≠n ƒë∆∞·ª£c danh s√°ch k·ªπ nƒÉng hi·ªán t·∫°i.",
  "D√†nh cho c√°c c√° nh√¢n mu·ªën ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß k·ªπ nƒÉng t·ª´ m√¥ t·∫£ c√¥ng vi·ªác c·ª• th·ªÉ.",
  "Bao g·ªìm m·ªçi t√≠nh nƒÉng c·ªßa g√≥i ph·ªï th√¥ng, theo d√µi ti·∫øn ƒë·ªô h·ªçc v√† c√°c t√≠nh nƒÉng cao c·∫•p.",
];
const planButtons = ["‚ûú Ti·∫øp t·ª•c", "‚ûú ƒêƒÉng k√Ω", "‚ûú ƒêƒÉng k√Ω"];

export default function ServicePayment() {
  const navigate = useNavigate();

  const [selectedPlan, setSelectedPlan] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState("");
  const [plans, setPlans] = useState([]);

  const [payLoading, setPayLoading] = useState(false);
  const [payError, setPayError] = useState("");

  const { user } = useContext(UserContext);

  // --- QR state ---
  const [qrLoading, setQrLoading] = useState(false);
  const [qrError, setQrError] = useState("");
  const [qrInfo, setQrInfo] = useState(null); // { qrCodeUrl, paymentId }
  const [checking, setChecking] = useState(false);
  const [polling, setPolling] = useState(false);
  const pollRef = useRef(null);
  const pollCountRef = useRef(0);

  // Store QR
  const { getSession, setSession /*, updateStatus, markPaid, clearSession*/ } = usePaymentQrStore();

  // Token + auth checker
  const token = useMemo(() => localStorage.getItem("token") || "", []);
  const isAuthenticated = (u, tkn) =>
    Boolean(tkn) && Boolean(u && (u.id || u.userId || u._id || u.email));

  const userId = user?.id || user?.userId || user?._id || null;
  const userRoleIndex = ROLE_HIERARCHY.indexOf(user?.role || "Free User");

  // Fetch plans
  useEffect(() => {
    (async () => {
      try {
        const data = await subscriptionService.getAllSubscriptions();
        const actives = (data || []).filter((g) => g.status === "active");
        actives.sort((a, b) => Number(a.id ?? a.subscriptionId) - Number(b.id ?? b.subscriptionId));

        const mapped = actives.map((item) => {
          const subscriptionId = Number(item.id ?? item.subscriptionId);
          const roleName = SUBSCRIPTION_ID_TO_ROLE[subscriptionId] || "Free User";
          const planRoleIndex = ROLE_HIERARCHY.indexOf(roleName);

          const isCurrentPlan = planRoleIndex === userRoleIndex;
          const isLowerPlan = planRoleIndex < userRoleIndex;
          const isHigherPlan = planRoleIndex > userRoleIndex;

          return {
            subscriptionId,
            name: item.subscriptionName,
            price: item.price === 0 ? "0 VNƒê" : `${item.price.toLocaleString("vi-VN")} VNƒê / 1 th√°ng`,
            amount: item.price,
            description: planDescriptions[planRoleIndex] || "",
            button: isCurrentPlan ? "‚úî G√≥i hi·ªán t·∫°i" : isLowerPlan ? "ƒê√£ bao g·ªìm" : planButtons[planRoleIndex],
            isDisabled: !isHigherPlan, // ch·ªâ g√≥i cao h∆°n m·ªõi enable
            isCurrentPlan,
            isLowerPlan,
            isHigherPlan,
          };
        });

        setPlans(mapped);
      } catch (err) {
        console.error("fetchPlans error", err);
        setPlans([]);
      }
    })();
  }, [userRoleIndex, user?.role]);

  function handleSelectPlan(plan) {
    // Ch·ªâ b·∫Øt login khi n√¢ng c·∫•p
    if (plan.isHigherPlan && !isAuthenticated(user, token)) {
      showInfo("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω g√≥i.");
      navigate("/login?return=/servicepayment");
      return;
    }

    if (plan.isDisabled) return;

    setPayError("");
    setQrError("");
    setQrInfo(null);
    setPaymentMethod("");

    if (plan.amount === 0) {
      navigate("/analyze");
    } else {
      setSelectedPlan(plan);
    }
  }

  async function handlePayWithVnpay() {
    if (!isAuthenticated(user, token)) {
      showInfo("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n.");
      navigate("/login?return=/servicepayment");
      return;
    }

    if (!selectedPlan?.subscriptionId) {
      const msg = "Kh√¥ng t√¨m th·∫•y m√£ g√≥i (subscriptionId).";
      setPayError(msg);
      showError(msg);
      return;
    }

    try {
      setPayLoading(true);
      setPayError("");
      const res = await paymentService.create(selectedPlan.subscriptionId);
      const paymentUrl = res?.paymentUrl;
      if (!paymentUrl) throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c paymentUrl t·ª´ m√°y ch·ªß.");
      showInfo("ƒêang chuy·ªÉn h∆∞·ªõng t·ªõi VNPay trong 3 gi√¢y...");
      setTimeout(() => (window.location.href = paymentUrl), 3000);
    } catch (e) {
      console.error(e);
      const msg = e?.response?.data?.message || e?.message || "T·∫°o giao d·ªãch VNPay th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
      setPayError(msg);
      showError(msg);
      setPayLoading(false);
    }
  }

  // Khi ch·ªçn ph∆∞∆°ng th·ª©c "qr": ch·ªâ t·∫°o 1 l·∫ßn cho (userId + subscriptionId)
  useEffect(() => {
    (async () => {
      if (paymentMethod !== "qr") return;
      if (!selectedPlan?.subscriptionId) return;

      if (!isAuthenticated(user, token)) {
        showInfo("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n qua QR.");
        setPaymentMethod("");
        navigate("/login?return=/servicepayment");
        return;
      }
      if (!userId) {
        showInfo("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        setPaymentMethod("");
        navigate("/login?return=/servicepayment");
        return;
      }

      setQrError("");
      setQrLoading(true);
      try {
        const existed = getSession(userId, selectedPlan.subscriptionId);
        if (existed?.qrCodeUrl && existed?.paymentId) {
          setQrInfo({ qrCodeUrl: existed.qrCodeUrl, paymentId: existed.paymentId });
          return;
        }

        // NOTE: n·∫øu service b·∫°n ƒë·∫∑t t√™n kh√°c (getPaymentQrCode) th√¨ ƒë·ªïi l·∫°i ·ªü ƒë√¢y
        const res = await paymentService.getPaymentQr(selectedPlan.subscriptionId);
        const qrCodeUrl = res?.result?.qrCodeUrl;
        const paymentId = res?.result?.paymentId;
        if (!qrCodeUrl || !paymentId) throw new Error("Thi·∫øu d·ªØ li·ªáu QR t·ª´ m√°y ch·ªß.");

        setSession(userId, selectedPlan.subscriptionId, { qrCodeUrl, paymentId, status: "PENDING" });
        setQrInfo({ qrCodeUrl, paymentId });
      } catch (e) {
        console.error("getPaymentQr error:", e);
        setQrError(e?.response?.data?.message || e?.message || "Kh√¥ng t·∫°o ƒë∆∞·ª£c m√£ QR.");
      } finally {
        setQrLoading(false);
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [paymentMethod, selectedPlan?.subscriptionId, userId, token]);

  // ---- Helpers: polling ----
  const stopPolling = () => {
    if (pollRef.current) {
      clearInterval(pollRef.current);
      pollRef.current = null;
    }
    setPolling(false);
    pollCountRef.current = 0;
  };

  const handleClosePopup = () => {
    stopPolling();
    setSelectedPlan(null);
    setPaymentMethod("");
    setPayError("");
    setPayLoading(false);
    setQrError("");
    setQrLoading(false);
    setChecking(false);
  };

  const checkOnce = async (pid) => {
    try {
      setChecking(true);
      const res = await paymentService.checkPaymentStatus(pid);
      const result = (res?.result || "").toString();
     console.log("checkPaymentStatus result:", res);
      if (result === "SUCCESS") {
        showSuccess("Thanh to√°n th√†nh c√¥ng!");
        navigate(`/payment-result?status=success&paymentId=${pid}`);
        return "SUCCESS";
      }
      if (result === "UNPAID") {
        showInfo("H·ªá th·ªëng ch∆∞a nh·∫≠n ƒë∆∞·ª£c thanh to√°n. S·∫Ω t·ª± ƒë·ªông ki·ªÉm tra l·∫°i‚Ä¶");
        return "UNPAID";
      }
      if (result.includes("kh√¥ng kh·ªõp")) {
        navigate(
          `/payment-result?status=error&paymentId=${pid}&message=${encodeURIComponent(
            "S·ªë ti·ªÅn thanh to√°n kh√¥ng kh·ªõp. Vui l√≤ng ki·ªÉm tra l·∫°i."
          )}`
        );
        return "AMOUNT_MISMATCH";
      }
      showError(result || "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c tr·∫°ng th√°i thanh to√°n.");
      return "UNKNOWN";
    } catch (e) {
      showError(e?.response?.data?.message || e?.message || "L·ªói ki·ªÉm tra thanh to√°n.");
      return "ERROR";
    } finally {
      setChecking(false);
      console.log(e);
      
    }
  };

  const handleConfirmTransfer = async () => {
    if (!qrInfo?.paymentId) {
      showError("Kh√¥ng t√¨m th·∫•y m√£ thanh to√°n. Vui l√≤ng t·∫°o QR l·∫°i.");
      return;
    }
    stopPolling();

    const first = await checkOnce(qrInfo.paymentId);
    if (first === "UNPAID") {
      setPolling(true);
      pollCountRef.current = 0;
      pollRef.current = setInterval(async () => {
        pollCountRef.current += 1;
        const r = await checkOnce(qrInfo.paymentId);
        if (r === "SUCCESS" || r === "AMOUNT_MISMATCH" || r === "ERROR") {
          stopPolling();
        } else if (pollCountRef.current >= 30) {
          stopPolling();
          showInfo("H·ªá th·ªëng v·∫´n ch∆∞a x√°c nh·∫≠n thanh to√°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau.");
        }
      }, 3000);
    }
  };

  // --- Popup ---
  function renderPaymentPopup() {
    if (!selectedPlan) return null;

    return (
      <div className="fixed inset-0 z-50 backdrop-blur-[2px] flex items-center justify-center">
        <div className="relative bg-white p-8 rounded-2xl shadow-2xl w-[380px] border border-blue-200 animate-fadeIn">
          <button
            onClick={handleClosePopup}
            className="absolute top-2 right-3 w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 text-2xl text-gray-400 hover:text-red-500 transition"
            aria-label="ƒê√≥ng"
          >
            &times;
          </button>

          <h3 className="text-blue-600 font-bold text-lg mb-4 text-center">
            Thanh to√°n ‚Äì {selectedPlan.name}
          </h3>

          <p className="font-medium text-sm mb-2 text-center">Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</p>

          <label className="flex items-center gap-2 mb-3 text-sm cursor-pointer">
            <input
              type="radio"
              name="method"
              value="qr"
              checked={paymentMethod === "qr"}
              onChange={(e) => setPaymentMethod(e.target.value)}
              className="accent-blue-500"
            />
            <span className="text-blue-600 font-medium">Thanh to√°n qua QR code</span>
          </label>

          <label className="flex items-center gap-2 mb-4 text-sm cursor-pointer">
            <input
              type="radio"
              name="method"
              value="vnpay"
              checked={paymentMethod === "vnpay"}
              onChange={(e) => setPaymentMethod(e.target.value)}
              className="accent-blue-500"
            />
            <span className="text-gray-800 font-medium">Thanh to√°n qua VNPay</span>
            <img src={vnpayLogo} alt="VNPay" className="h-5 ml-1" />
          </label>

          {/* QR METHOD */}
          {paymentMethod === "qr" && (
            <div className="mt-1">
              {qrLoading ? (
                <div className="py-10 text-center text-sm text-gray-500">ƒêang kh·ªüi t·∫°o m√£ QR‚Ä¶</div>
              ) : qrError ? (
                <div className="text-red-600 text-sm mb-2 text-center">{qrError}</div>
              ) : qrInfo ? (
                <>
                  <div className="flex items-center justify-center relative mb-2">
                    <img
                      src={qrInfo.qrCodeUrl}
                      alt="QR code"
                      className="w-48 h-48 rounded-xl border border-blue-100"
                    />
                  </div>
                  <p className="text-center text-gray-700 text-sm">
                    M√£ thanh to√°n: <b>#{qrInfo.paymentId}</b>
                  </p>
                  <p className="text-center text-red-600 text-sm font-semibold mt-1">
                    M·ª©c ph√≠: {selectedPlan.amount.toLocaleString("vi-VN")} VNƒê
                  </p>
                  <p className="text-xs text-gray-500 text-center mt-1">
                    (Vui l√≤ng kh√¥ng thay ƒë·ªïi n·ªôi dung chuy·ªÉn kho·∫£n)
                  </p>
                  <div className="mt-4 space-y-2">
                    <button
                      onClick={handleConfirmTransfer}
                      className="bg-green-600 hover:bg-green-700 text-white font-semibold w-full py-2 rounded-lg shadow transition disabled:opacity-60"
                      disabled={checking || polling}
                    >
                      {checking
                        ? "ƒêang ki·ªÉm tra‚Ä¶"
                        : polling
                        ? "ƒêang ƒë·ª£i x√°c nh·∫≠n‚Ä¶ (t·ª± ƒë·ªông ki·ªÉm tra)"
                        : "‚úÖ T√¥i ƒë√£ chuy·ªÉn kho·∫£n"}
                    </button>
                    <button
                      onClick={handleClosePopup}
                      className="border hover:bg-gray-50 text-gray-700 font-semibold w-full py-2 rounded-lg shadow-sm transition"
                      disabled={checking}
                    >
                      ƒê√≥ng
                    </button>
                  </div>
                  <p className="text-[11px] text-gray-500 text-center mt-2">
                    *M√£ QR n√†y ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v√† s·∫Ω ƒë∆∞·ª£c d√πng l·∫°i cho g√≥i n√†y.
                  </p>
                </>
              ) : (
                <div className="py-10 text-center text-sm text-gray-500">Ch·ªçn QR ƒë·ªÉ kh·ªüi t·∫°o‚Ä¶</div>
              )}
            </div>
          )}

          {/* VNPAY METHOD */}
          {paymentMethod === "vnpay" && (
            <div className="mt-4 border rounded-lg bg-blue-50 p-4 text-sm text-center">
              <p className="text-gray-700 mb-2">B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng t·ªõi c·ªïng thanh to√°n VNPay.</p>

              {payError && <p className="text-red-600 text-xs mb-2">{payError}</p>}

              <button
                className="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold shadow transition disabled:opacity-60"
                onClick={handlePayWithVnpay}
                disabled={payLoading}
              >
                {payLoading ? "ƒêang t·∫°o giao d·ªãch..." : "Ti·∫øp t·ª•c thanh to√°n"}
              </button>

              <p className="text-[11px] text-gray-500 mt-2">
                G√≥i: <b>{selectedPlan.name}</b> ‚Ä¢ M·ª©c ph√≠:{" "}
                <b>{selectedPlan.amount.toLocaleString("vi-VN")} VNƒê</b>
              </p>
            </div>
          )}
        </div>
      </div>
    );
  }

  function renderFeatureGroup(title, featureList) {
    return (
      <div className="space-y-2" key={title}>
        <h3 className="text-md font-semibold text-gray-700">{title}</h3>
        <div className="border border-blue-300 rounded-xl overflow-hidden text-sm">
          <table className="w-full border-separate border-spacing-0">
            <thead className="bg-blue-50 text-gray-800 font-semibold text-center">
              <tr>
                <th className="border px-4 py-3 text-left w-[50%]">T√≠nh nƒÉng</th>
                <th className="border px-4 py-3">Mi·ªÖn ph√≠</th>
                <th className="border px-4 py-3">G√≥i n√¢ng cao</th>
                <th className="border px-4 py-3">G√≥i to√†n di·ªán</th>
              </tr>
            </thead>
            <tbody>
              {featureList.map((item, idx) => (
                <tr key={idx} className="text-center align-top hover:bg-blue-50 transition">
                  <td className="border px-4 py-3 text-left text-gray-800">{item.feature}</td>
                  {item.values.map((value, i) => (
                    <td key={i} className="border px-4 py-3">
                      {value ? (
                        <span className="text-green-500 text-lg font-bold">‚úî</span>
                      ) : (
                        <span className="text-gray-400 text-lg font-bold">‚úñ</span>
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="max-w-7xl mx-auto">{/* <TopMenu /> */}</div>
      <div className="bg-white min-h-screen p-6 max-w-6xl mx-auto space-y-8">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Thanh to√°n ‚Äì ƒêƒÉng k√Ω g√≥i d·ªãch v·ª•</h2>

        <div className="grid md:grid-cols-3 gap-4">
          {plans.length > 0 ? (
            plans.map((plan, idx) => (
              <div
                key={idx}
                className={`border rounded-xl p-5 shadow-sm flex flex-col items-center transition ${
                  plan.isCurrentPlan
                    ? "bg-green-50 border-green-400 shadow-md"
                    : plan.isLowerPlan
                    ? "bg-gray-50 border-gray-300"
                    : "bg-white border-blue-300 hover:shadow-lg"
                }`}
              >
                <h3 className="font-semibold text-lg text-gray-800 mb-1 text-center">{plan.name}</h3>
                <p className="text-red-600 font-semibold text-sm text-center">{plan.price}</p>
                <p className="text-sm text-gray-700 mt-2 text-center min-h-[56px]">{plan.description}</p>
                <div className="mt-6 w-full flex justify-center">
                  <button
                    className={`px-6 py-2 text-sm rounded-md font-semibold w-full transition disabled:opacity-60 text-white ${
                      plan.isCurrentPlan
                        ? "bg-gray-400 cursor-default"
                        : plan.isLowerPlan
                        ? "bg-gray-300 cursor-not-allowed"
                        : "bg-blue-500 hover:bg-blue-600"
                    }`}
                    onClick={() => handleSelectPlan(plan)}
                    disabled={plan.isDisabled}
                    title={
                      plan.isCurrentPlan
                        ? "B·∫°n ƒëang d√πng g√≥i n√†y"
                        : plan.isLowerPlan
                        ? "G√≥i n√†y ƒë√£ n·∫±m trong g√≥i hi·ªán t·∫°i c·ªßa b·∫°n"
                        : ""
                    }
                  >
                    {plan.button}
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="col-span-3 text-center text-gray-400 italic py-10">
              Kh√¥ng c√≥ g√≥i d·ªãch v·ª• n√†o kh·∫£ d·ª•ng.
            </div>
          )}
        </div>

        {featureGroups.map((group) => renderFeatureGroup(group.title, group.items))}

        {renderPaymentPopup()}
      </div>
    </>
  );
}
